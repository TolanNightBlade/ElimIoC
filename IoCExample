<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <script src="/res/js/lib/jquery-1.10.1.min.js" type="text/javascript"></script>
    <script src="/lib/signals.js" type="text/javascript"></script>
    <script src="/ElimIoC.js" type="text/javascript"></script>
</head>
<body>
    <div id="servicesCount" style="margin:10px;border:1px solid gray;padding:2px;"></div>
    <div id="testArea">

    </div>
    <script>

        if (!Function.prototype.bind) {
            Function.prototype.bind = function () {
                "use strict";
                var fn = this, args = Array.prototype.slice.call(arguments), object = args.shift();
                return function () {
                    return fn.apply(object, args.concat(Array.prototype.slice.call(arguments)));
                };
            };
        }

        if (!Array.prototype.forEach) {
            Array.prototype.forEach = function (fun /*, thisp*/) {
                var len = this.length;
                if (typeof fun != "function")
                    throw new TypeError();

                var thisp = arguments[1];
                for (var i = 0; i < len; i++) {
                    if (i in this)
                        fun.call(thisp, this[i], i, this);
                }
            };
        }

        if (Function.prototype.bind && window.console && typeof console.log == "object") {
            [
              "log", "info", "warn", "error", "assert", "dir", "clear", "profile", "profileEnd"
            ].forEach(function (method) {
                console[method] = this.bind(console[method], console);
            }, Function.prototype.call);
        }

        function logger() {
            this.l = Function.prototype.bind.call(console.log, console);
        };

        logger.prototype = {
            log: function (msg) {
                this.l.apply(console, arguments);
            }
        };

        function repoOne(logger) {
            console.log('CTor repoOne called.');
            this.logger = logger;
        };

        repoOne.prototype = {
            deps: ['logger'],
            moo: function () {
                $('#testArea').html("moo worked");
                this.logger.log('repoOne>Moo called');
            }
        };

        function ControllerOne(_repo, _logger, options) {
            this.X = "a";
            this.repo = _repo;
            this.logger = _logger;
            this.options = options;
            this.name = "";
        };

        ControllerOne.prototype = {
            deps: ["repoOne", "logger"],
            test: function () {
                this.logger.log('ControllerOne>test called', this.someValue);
                this.repo.moo();

                $('#testArea').html($('#testArea').html() + '<br/>' + this.name + ' / ' + this.someValue);
            },
            someSetterFunction: function (name) {
                this.name = name;
            },
            someValue: 0
        };

        container.serviceRegistered.add(function (item) {
            console.log('@serviceRegistered', item);
        });

        container.register("logger", logger, null)
            .asSingleton()
            .withPostConstructor(function () {
                console.log('@@Logger post constructor called');
            });
        container.register("repoOne", repoOne, null);
        //container.register("repoOne", repoOne, null);
        container.register("ControllerOne", ControllerOne, [{ name: "moo", value: "value" }])
            .withSettings([{ name: "someSetterFunction", value: "setname" }, { name: "someValue", value:99 }]);

        var instance = container.resolve("ControllerOne");

        console.log('instance', instance);

        instance.test();

        $(document).ready(function () {
            var servicesHtml = 'Services count: ' + container.serviceCount();
            servicesHtml += '<br/>Singleton count: ' + container.singletonCount();
            $('#servicesCount').html(servicesHtml);
        });
    </script>
</body>
</html>
